#include "internal.h"

//------------------------------------------------------------------------------
#define PRINT(TYPE, SYM, CAST) VEDAresult veda_tensors_print(const TYPE* ptr, size_t elements) {\
	elements = std::min(elements, 20lu);\
	for(size_t i = 0; i < elements; i++)\
		L_INFO("%p[%llu]: " SYM "\n", &ptr[i], i, (CAST)ptr[i]);\
	return VEDA_SUCCESS;\
}

PRINT(int8_t,	"%i",	int32_t)
PRINT(int16_t,	"%i",	int32_t)
PRINT(int32_t,	"%i",	int32_t)
PRINT(int64_t,	"%lli",	int64_t)
PRINT(uint8_t,	"%u",	uint32_t)
PRINT(uint16_t,	"%u",	uint32_t)
PRINT(uint32_t,	"%u",	uint32_t)
PRINT(uint64_t,	"%llu",	uint64_t)
PRINT(float,	"%f",	float)
PRINT(double,	"%f",	double)
#undef PRINT

//------------------------------------------------------------------------------
#define PRINT(TYPE, SYM) VEDAresult veda_tensors_print(const TYPE* ptr, size_t elements) {\
	elements = std::min(elements, 20lu);\
	for(size_t i = 0; i < elements; i++)\
		L_INFO("%p[%llu]: " SYM "\n", &ptr[i], i, ptr[i].x, ptr[i].y);\
	return VEDA_SUCCESS;\
}

PRINT(float_float,   "%f+%fj")
PRINT(double_double, "%f+%fj")
#undef PRINT

//------------------------------------------------------------------------------
template<typename T>				inline VEDAresult veda_tensors_print(const void* ptr, const size_t elements) {	return veda_tensors_print((const T*)ptr, elements);	}
template<typename S, typename T>	inline VEDAresult veda_tensors_print(const void* ptr, const size_t elements) {	return veda_tensors_print((const T*)ptr, elements);	}

//------------------------------------------------------------------------------
__global__ void veda_tensors_print(VEDAdeviceptr _ptr, const uint64_t elements, const int type) {
	auto ptr = VEDAptr<void>(_ptr).ptr();
	KERNEL_ALL(type, veda_tensors_print, ptr, elements);
}

//------------------------------------------------------------------------------
