#include "internal.h"

//------------------------------------------------------------------------------
#define UnaryTTTS(NAME, ...)\
	struct NAME {\
		template<typename S, typename T>\
		inline T operator()(const T a, const T b, const T c, const S alpha) const {\
			return __VA_ARGS__;\
		}\
	}
UnaryTTTS(AddCMul, a + alpha *  b * c);
UnaryTTTS(AddCDiv, a + alpha * (b / c));
#undef UnaryTTTS

//------------------------------------------------------------------------------
template<typename S, typename T=S>
inline void veda_tensors_unary_ttts(void* o, const void* x, const void* y, const void* z, const void* alpha, const size_t oc, const size_t ox, const size_t oy, const size_t oz, const int op) {
	switch(op) {
		case VEDA_TENSORS_UNARY_ADDCMUL:	veda_tensors_xyzw((T*)o, (const T*)x, (const T*)y, (const T*)z, (const S*)alpha, oc, ox, oy, oz, 1, AddCMul());	return;
		case VEDA_TENSORS_UNARY_ADDCDIV:	veda_tensors_xyzw((T*)o, (const T*)x, (const T*)y, (const T*)z, (const S*)alpha, oc, ox, oy, oz, 1, AddCDiv());	return;
	}
	FAIL();
}

//------------------------------------------------------------------------------
__global__ void veda_tensors_unary_ttts(VEDAdeviceptr _o, VEDAdeviceptr _x, VEDAdeviceptr _y, VEDAdeviceptr _z, const uint64_t alpha_x, const uint64_t alpha_y, const size_t oc, const size_t ox, const size_t oy, const size_t oz, const int op, const int type) {
	auto o	= VEDAptr<void>(_o).ptr();
	auto x	= VEDAptr<void>(_x).ptr();
	auto y	= VEDAptr<void>(_y).ptr();
	auto z	= VEDAptr<void>(_z).ptr();
	const uint64_t alpha[] = {alpha_x, alpha_y};
	KERNEL_ALL(type, veda_tensors_unary_ttts, o, x, y, z, &alpha, oc, ox, oy, oz, op);
}

//------------------------------------------------------------------------------
