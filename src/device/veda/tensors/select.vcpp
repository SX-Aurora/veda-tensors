#include "internal.h"

//------------------------------------------------------------------------------
#define UnaryB(NAME, ...)\
	struct NAME {\
		template<typename T>\
		inline int8_t operator()(const T a) const {\
			return __VA_ARGS__;\
		}\
	}

UnaryB(IsFinite,	a != std::numeric_limits<T>::infinity());
UnaryB(IsInf,		a == std::numeric_limits<T>::infinity());
UnaryB(IsNan,		!(a == a));
#undef UnaryB

//------------------------------------------------------------------------------
template<typename T>
inline void veda_tensors_select(T* _out, const T* _in, const size_t ocnt, const size_t ostride, const size_t icnt, const size_t offset) {
	_in += offset;

	if(ocnt == 1 && icnt == 1) {
		*_out = *_in;
	} else if(ocnt == 1) {
		vedaMemcpy(_out, _in, sizeof(T) * icnt);
	} else if(icnt == 1) {
		veda_omp_simd(ocnt, [=](const size_t min, const size_t max) {
			auto in		= _in  + min * ostride;
			auto out	= _out + min;
			auto ocnt	= max - min;

			for(size_t o = 0; o < ocnt; o++)
				out[o] = in[o * ostride];
		}, veda_omp_vlen<T>());
	} else {
		veda_omp(ocnt, [=](const size_t min, const size_t max) {
			auto in  = _in  + min * ostride;
			auto out = _out + min * icnt;

			#pragma _NEC novector
			for(size_t o = min; o < max; o++) {
				memcpy(out, in, icnt * sizeof(T));
				out += icnt; 
				in  += ostride;
			}
		});
	}
}

//------------------------------------------------------------------------------
__global__ void veda_tensors_select(VEDAdeviceptr _out, VEDAdeviceptr _in, const size_t ocnt, const size_t ostride, const size_t icnt, const size_t offset, const int bytes) {
	auto out	= VEDAptr<void>(_out).ptr();
	auto in		= VEDAptr<void>(_in) .ptr();
	
	switch(bytes) {
		case 1:	veda_tensors_select((int8_t*) out, (const int8_t*) in, ocnt, ostride, icnt, offset);	return;
		case 2:	veda_tensors_select((int16_t*)out, (const int16_t*)in, ocnt, ostride, icnt, offset);	return;
		case 4:	veda_tensors_select((int32_t*)out, (const int32_t*)in, ocnt, ostride, icnt, offset);	return;
		case 8:	veda_tensors_select((int64_t*)out, (const int64_t*)in, ocnt, ostride, icnt, offset);	return;
	}

	FAIL();
}

//------------------------------------------------------------------------------
