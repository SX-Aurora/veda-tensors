#include "internal.h"

//------------------------------------------------------------------------------
#define VECTOR VEDA_TENSORS_NO_VECTOR
#define T int8_t
#include "transpose.inc.vcpp"

#define VECTOR VEDA_TENSORS_NO_VECTOR
#define T int16_t
#include "transpose.inc.vcpp"

#define VECTOR VEDA_TENSORS_PACKED_VECTOR
#define T int32_t
#include "transpose.inc.vcpp"

#define VECTOR VEDA_TENSORS_VECTOR
#define T int64_t
#include "transpose.inc.vcpp"

//------------------------------------------------------------------------------
__global__ void veda_tensors_transpose(VEDAdeviceptr _dst, VEDAdeviceptr _src, const uint64_t sizeA, const uint64_t sizeB, const int bytes) {
	auto dst = VEDAptr<void>(_dst).ptr();
	auto src = VEDAptr<void>(_src).ptr();
	switch(bytes) {
		case 1:	veda_tensors_transpose((int8_t*) dst, (int8_t*) src, sizeA, sizeB);	return;
		case 2:	veda_tensors_transpose((int16_t*)dst, (int16_t*)src, sizeA, sizeB);	return;
		case 4:	veda_tensors_transpose((int32_t*)dst, (int32_t*)src, sizeA, sizeB);	return;
		case 8:	veda_tensors_transpose((int64_t*)dst, (int64_t*)src, sizeA, sizeB);	return;
	}
	FAIL();
}

//------------------------------------------------------------------------------
