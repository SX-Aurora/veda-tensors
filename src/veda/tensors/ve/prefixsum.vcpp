#include "kernel.h"
#include "vstl_prefix_sum.hpp"

//------------------------------------------------------------------------------
template<typename T>
inline void veda_tensors_prefixsum(T* out, const T* in, const size_t cnt) {
	vstl::seq::prefix_sum(in, out, cnt);
}

//------------------------------------------------------------------------------
template<typename T>
VEDAresult veda_tensors_prefixsum(T* out, T* carry, const T* in, const size_t left, const size_t center, const size_t right, const bool inclusive) {
	if(right == 1) {
		sol_parallel_for(left, [&](const size_t min, const size_t max) {
			#pragma _NEC novector
			for(size_t l = min; l < max; l++)
				veda_tensors_prefixsum(&out[l * center], &in[l * center], center);
		});
	} else {
		sol_parallel_for(left, [&](const size_t min, const size_t max) {
			T* tmp = new T[center];

			#pragma _NEC novector
			for(size_t l = min; l < max; l++) {
				#pragma _NEC novector
				for(size_t r = 0; r < right; r++) {
					auto in_ = &in[l * center * right];
					for(size_t c = 0; c < center; c++)
						tmp[c] = in_[c * right + r];
					
					veda_tensors_prefixsum(tmp, tmp, center);
						
					auto out_ = &out[l * center * right];
					for(size_t c = 0; c < center; c++) 
						out_[c * right + r] = tmp[c];
				}
			}

			delete[] tmp;
		});
	}

	return VEDA_SUCCESS;
}

//------------------------------------------------------------------------------
template<typename T>
inline VEDAresult veda_tensors_prefixsum(void* out, const void* in, const size_t left, const size_t center, const size_t right, const bool inclusive) {
	return veda_tensors_prefixsum((T*)out, (const T*)in, left, center, right, inclusive);
}

//------------------------------------------------------------------------------
extern "C" void veda_tensors_prefixsum(VEDAdeviceptr _out, VEDAdeviceptr _in, const size_t left, const size_t center, const size_t right, const int type, const int inclusive) {
	auto out	= VEDAptr<void>	(_out)	.ptr();
	auto in		= VEDAptr<void>	(_in)	.ptr();
	KERNEL_PRIMITIVE(type, veda_tensors_prefixsum, out, in, left, center, right, inclusive);
}

//------------------------------------------------------------------------------
