#include "kernel.h"

//------------------------------------------------------------------------------
#define BinaryOp(NAME, ...)\
	struct NAME {\
		template<typename T>\
		inline boolean operator()(const T a, const T b) const {\
			return __VA_ARGS__;\
		}\
	}

BinaryOp(LT,	a < b);
BinaryOp(LE,	a <= b);
BinaryOp(GT,	a > b);
BinaryOp(GE,	a >= b);
BinaryOp(EQ,	a == b);
BinaryOp(NE,	!(a == b)); // [SOL-NCC001]: a != b does not work correctly when vectorized and NANs appear!
BinaryOp(AND,	(a != 0) && (b != 0));
BinaryOp(OR,	(a != 0) || (b != 0));
BinaryOp(XOR,	(a != 0) != (b != 0));

//------------------------------------------------------------------------------
template<typename T>
inline void veda_tensors_binary(boolean* o, void* x, void* y, const size_t co, const size_t cx, const size_t cy, const int op) {
	switch(op) {
		case VEDA_TENSORS_BINARYOP_EQ:		return veda_tensors_xy(o, (const T*)x, (const T*)y, co, cx, cy, EQ());
		case VEDA_TENSORS_BINARYOP_NE:		return veda_tensors_xy(o, (const T*)x, (const T*)y, co, cx, cy, NE());
		case VEDA_TENSORS_BINARYOP_LT:		return veda_tensors_xy(o, (const T*)x, (const T*)y, co, cx, cy, LT());
		case VEDA_TENSORS_BINARYOP_LE:		return veda_tensors_xy(o, (const T*)x, (const T*)y, co, cx, cy, LE());
		case VEDA_TENSORS_BINARYOP_GT:		return veda_tensors_xy(o, (const T*)x, (const T*)y, co, cx, cy, GT());
		case VEDA_TENSORS_BINARYOP_GE:		return veda_tensors_xy(o, (const T*)x, (const T*)y, co, cx, cy, GE());
		case VEDA_TENSORS_BINARYOP_AND:		return veda_tensors_xy(o, (const T*)x, (const T*)y, co, cx, cy, AND());
		case VEDA_TENSORS_BINARYOP_OR:		return veda_tensors_xy(o, (const T*)x, (const T*)y, co, cx, cy, OR());
		case VEDA_TENSORS_BINARYOP_XOR:		return veda_tensors_xy(o, (const T*)x, (const T*)y, co, cx, cy, XOR());
	}
	FAIL();
}

//------------------------------------------------------------------------------
template<typename S, typename T>
inline void veda_tensors_binary(boolean* o, void* x, void* y, const size_t co, const size_t cx, const size_t cy, const VEDATensors_binary_op op) {
	switch(op) {
		case VEDA_TENSORS_BINARYOP_EQ:	return veda_tensors_xy(o, (const T*)x, (const T*)y, co, cx, cy, EQ());
		case VEDA_TENSORS_BINARYOP_NE:	return veda_tensors_xy(o, (const T*)x, (const T*)y, co, cx, cy, NE());
	}
	FAIL();
}

//------------------------------------------------------------------------------
extern "C" void veda_tensors_binary(VEDAdeviceptr _o, VEDAdeviceptr _x, VEDAdeviceptr _y, const size_t co, const size_t cx, const size_t cy, const int32_t op, const int32_t type) {
	auto o	= VEDAptr<boolean>	(_o).ptr();
	auto x	= VEDAptr<void>		(_x).ptr();
	auto y	= VEDAptr<void>		(_y).ptr();
	KERNEL_ALL(type, veda_tensors_binary, o, x, y, co, cx, cy, op);
}

//------------------------------------------------------------------------------
