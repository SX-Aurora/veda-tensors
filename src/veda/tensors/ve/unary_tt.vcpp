#include "kernel.h"

//------------------------------------------------------------------------------
#define UnaryTT(NAME, ...)\
	struct NAME {\
		template<typename T>\
		inline T operator()( const T a, const T b) const {\
			return __VA_ARGS__;\
		}\
	}

UnaryTT(Min, std::min(a, b));
UnaryTT(Max, std::max(a, b));
UnaryTT(Add, a + b);
UnaryTT(Sub, a - b);
UnaryTT(Mul, a * b);
UnaryTT(Div, a / b);
#undef UnaryTT

//------------------------------------------------------------------------------
template<typename T>
inline VEDAresult veda_tensors_unary_tt(void* o, const void* x, const void* y, const size_t co, const size_t cx, const size_t cy, const int32_t op) {
	switch(op) {
		case VEDA_TENSORS_UNARYOP_MIN:	return veda_tensors_xy((T*)o, (const T*)x, (const T*)y, co, cx, cy, Min());
		case VEDA_TENSORS_UNARYOP_MAX:	return veda_tensors_xy((T*)o, (const T*)x, (const T*)y, co, cx, cy, Max());
		case VEDA_TENSORS_UNARYOP_ADD:	return veda_tensors_xy((T*)o, (const T*)x, (const T*)y, co, cx, cy, Add());
		case VEDA_TENSORS_UNARYOP_SUB:	return veda_tensors_xy((T*)o, (const T*)x, (const T*)y, co, cx, cy, Sub());
		case VEDA_TENSORS_UNARYOP_MUL:	return veda_tensors_xy((T*)o, (const T*)x, (const T*)y, co, cx, cy, Mul());
		case VEDA_TENSORS_UNARYOP_DIV:	return veda_tensors_xy((T*)o, (const T*)x, (const T*)y, co, cx, cy, Div());
	}
	return VEDA_ERROR_NOT_IMPLEMENTED;
}

//------------------------------------------------------------------------------
template<typename S, typename T>
inline VEDAresult veda_tensors_unary_tt(void* o, const void* x, const void* y, const size_t co, const size_t cx, const size_t cy, const int32_t op) {
	switch(op) {
		case VEDA_TENSORS_UNARYOP_ADD:	return veda_tensors_xy((T*)o, (const T*)x, (const T*)y, co, cx, cy, Add());
		case VEDA_TENSORS_UNARYOP_SUB:	return veda_tensors_xy((T*)o, (const T*)x, (const T*)y, co, cx, cy, Sub());
		case VEDA_TENSORS_UNARYOP_MUL:	return veda_tensors_xy((T*)o, (const T*)x, (const T*)y, co, cx, cy, Mul());
		case VEDA_TENSORS_UNARYOP_DIV:	return veda_tensors_xy((T*)o, (const T*)x, (const T*)y, co, cx, cy, Div());
	}
	return VEDA_ERROR_NOT_IMPLEMENTED;
}

//------------------------------------------------------------------------------
extern "C" void veda_tensors_unary_tt(VEDAdeviceptr _o, VEDAdeviceptr _x, VEDAdeviceptr _y, const size_t co, const size_t cx, const size_t cy, const int32_t op, const int32_t type) {
	auto o	= VEDAptr<void>(_o).ptr();
	auto x	= VEDAptr<void>(_x).ptr();
	auto y	= VEDAptr<void>(_y).ptr();
	KERNEL_ALL(type, veda_tensors_unary_tt, o, x, y, co, cx, cy, op);
}

//------------------------------------------------------------------------------
