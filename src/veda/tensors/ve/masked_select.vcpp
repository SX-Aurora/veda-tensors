#include "kernel.h"

//------------------------------------------------------------------------------
template<typename T>
inline void veda_tensors_masked_select(T* out, const T* in, const boolean* mask, const size_t elements) {
	size_t index = 0;
	veda_omp_simd(elements, veda_tensors_parallel_vlen<T>(), [&](const size_t min, const size_t max) {
		auto mask_ = mask + min;
		auto in_   = in   + min;
		auto cnt   = max  - min;
		for(size_t i = 0; i < cnt; i++)
			if(mask_[i])
				out[index++] = in_[i];
	});
}

//------------------------------------------------------------------------------
extern "C" void veda_tensors_masked_select(VEDAdeviceptr _out, VEDAdeviceptr _in, VEDAdeviceptr _mask, const uint64_t elements, const int32_t bytes) {
	auto out	= VEDAptr<void>(_out)		.ptr();
	auto in		= VEDAptr<void>(_in)		.ptr();
	auto mask	= VEDAptr<boolean>(_mask)	.ptr();

	switch(bytes) {
		case 1:	veda_tensors_masked_select<int8_t> ((int8_t*) out, (int8_t*) in, mask, elements); return;
		case 2:	veda_tensors_masked_select<int16_t>((int16_t*)out, (int16_t*)in, mask, elements); return;
		case 3:	veda_tensors_masked_select<int32_t>((int32_t*)out, (int32_t*)in, mask, elements); return;
		case 4:	veda_tensors_masked_select<int64_t>((int64_t*)out, (int64_t*)in, mask, elements); return;
	}
	FAIL();
}

//------------------------------------------------------------------------------
