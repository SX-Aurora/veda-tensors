// Copyright 2022 NEC Laboratories Europe

#pragma once 

//------------------------------------------------------------------------------
typedef enum {
	VEDA_TENSORS_UNARYOP_UNKNOWN	= -1,
	VEDA_TENSORS_UNARYOP_ABS		= 0,
	VEDA_TENSORS_UNARYOP_SQRT		= 1,
	VEDA_TENSORS_UNARYOP_RSQRT		= 2,
	VEDA_TENSORS_UNARYOP_SIN		= 3,
	VEDA_TENSORS_UNARYOP_COS		= 4,
	VEDA_TENSORS_UNARYOP_TAN		= 5,
	VEDA_TENSORS_UNARYOP_EXP		= 6,
	VEDA_TENSORS_UNARYOP_LOG		= 7,
	VEDA_TENSORS_UNARYOP_MIN		= 8,
	VEDA_TENSORS_UNARYOP_MAX		= 9,
	VEDA_TENSORS_UNARYOP_CEIL		= 10,
	VEDA_TENSORS_UNARYOP_FLOOR		= 11,
	VEDA_TENSORS_UNARYOP_ADD		= 12,
	VEDA_TENSORS_UNARYOP_SUB		= 13,
	VEDA_TENSORS_UNARYOP_MUL		= 14,
	VEDA_TENSORS_UNARYOP_DIV		= 15,
	VEDA_TENSORS_UNARYOP_RECIPROCAL	= 16,
	VEDA_TENSORS_UNARYOP_ADDCMUL	= 17,
	VEDA_TENSORS_UNARYOP_ADDCDIV	= 18,
	VEDA_TENSORS_UNARYOP_ISFINITE	= 19,
	VEDA_TENSORS_UNARYOP_ISINF		= 20,
	VEDA_TENSORS_UNARYOP_ISNAN		= 21,
	VEDA_TENSORS_UNARYOP_REAL		= 22,
	VEDA_TENSORS_UNARYOP_IMAG		= 23
} VEDATensors_unary_op;

//------------------------------------------------------------------------------
typedef enum {
	VEDA_TENSORS_REDUCEOP_UNKNOWN	= -1,
	VEDA_TENSORS_REDUCEOP_MIN		= 0,
	VEDA_TENSORS_REDUCEOP_MAX		= 1,
	VEDA_TENSORS_REDUCEOP_MEAN		= 2,
	VEDA_TENSORS_REDUCEOP_SUM		= 3,
	VEDA_TENSORS_REDUCEOP_L0		= 4,
	VEDA_TENSORS_REDUCEOP_L1		= 5,
	VEDA_TENSORS_REDUCEOP_L2		= 6
} VEDATensors_reduce_op;

//------------------------------------------------------------------------------
typedef enum {
	VEDA_TENSORS_DTYPE_UNKNOWN	= -1,
	VEDA_TENSORS_DTYPE_S8		= 0,
	VEDA_TENSORS_DTYPE_S16		= 1,
	VEDA_TENSORS_DTYPE_S32		= 2,
	VEDA_TENSORS_DTYPE_S64		= 3,
	VEDA_TENSORS_DTYPE_U8		= 4,
	VEDA_TENSORS_DTYPE_U16		= 5,
	VEDA_TENSORS_DTYPE_U32		= 6,
	VEDA_TENSORS_DTYPE_U64		= 7,
	VEDA_TENSORS_DTYPE_F32		= 8,
	VEDA_TENSORS_DTYPE_F64		= 9,
	VEDA_TENSORS_DTYPE_F32_F32	= 10,
	VEDA_TENSORS_DTYPE_F64_F64	= 11,
	VEDA_TENSORS_DTYPE_BOOL		= 12
} VEDATensors_dtype;

//------------------------------------------------------------------------------
typedef enum {
	VEDA_TENSORS_BINARYOP_UNKNOWN	= -1,
	VEDA_TENSORS_BINARYOP_EQ		= 0,
	VEDA_TENSORS_BINARYOP_NE		= 1,
	VEDA_TENSORS_BINARYOP_LT		= 2,
	VEDA_TENSORS_BINARYOP_LE		= 3,
	VEDA_TENSORS_BINARYOP_GT		= 4,
	VEDA_TENSORS_BINARYOP_GE		= 5,
	VEDA_TENSORS_BINARYOP_AND		= 6,
	VEDA_TENSORS_BINARYOP_OR		= 7,
	VEDA_TENSORS_BINARYOP_XOR		= 8
} VEDATensors_binary_op;

//------------------------------------------------------------------------------
typedef enum {
	VEDA_TENSORS_BITWISEOP_UNKNOWN	= -1,
	VEDA_TENSORS_BITWISEOP_AND		= 0,
	VEDA_TENSORS_BITWISEOP_OR		= 1,
	VEDA_TENSORS_BITWISEOP_XOR		= 2
} VEDATensors_bitwise_op;

//------------------------------------------------------------------------------
typedef enum {
	VEDA_TENSORS_KERNEL_UNKNOWN				= -1,
	VEDA_TENSORS_KERNEL_BINARY				= 0,
	VEDA_TENSORS_KERNEL_BITWISE				= 1,
	VEDA_TENSORS_KERNEL_CAT					= 2,
	VEDA_TENSORS_KERNEL_CONVERT				= 3,
	VEDA_TENSORS_KERNEL_COPY				= 4,
	VEDA_TENSORS_KERNEL_COUNT				= 5,
	VEDA_TENSORS_KERNEL_TRANSPOSE			= 6,
	VEDA_TENSORS_KERNEL_MASKED_FILL			= 7,
	VEDA_TENSORS_KERNEL_MASKED_FILL_T		= 8,
	VEDA_TENSORS_KERNEL_MASKED_SCATTER		= 9,
	VEDA_TENSORS_KERNEL_MASKED_SELECT		= 10,
	VEDA_TENSORS_KERNEL_PREFIX_SUM			= 11,
	VEDA_TENSORS_KERNEL_PRINT				= 12,
	VEDA_TENSORS_KERNEL_REDUCE				= 13,
	VEDA_TENSORS_KERNEL_REDUCE_DIM			= 14,
	VEDA_TENSORS_KERNEL_REDUCE_SCALAR		= 15,
	VEDA_TENSORS_KERNEL_SELECT				= 16,
	VEDA_TENSORS_KERNEL_UNARY_B				= 17,
	VEDA_TENSORS_KERNEL_UNARY_C				= 18,
	VEDA_TENSORS_KERNEL_UNARY_T				= 19,
	VEDA_TENSORS_KERNEL_UNARY_TT			= 20,
	VEDA_TENSORS_KERNEL_UNARY_TTS			= 21,
	VEDA_TENSORS_KERNEL_UNARY_TTTS			= 22,
	VEDA_TENSORS_KERNEL_CNT					= 23
} VEDATensors_kernel;

//------------------------------------------------------------------------------
struct VEDATensors_handle_struct {
	VEDAdevice		idx;
	VEDAmodule		mod;
	VEDAfunction	funcs[VEDA_TENSORS_KERNEL_CNT];
};
typedef struct VEDATensors_handle_struct* VEDATensors_handle;

//------------------------------------------------------------------------------

